var documenterSearchIndex = {"docs":
[{"location":"mist/#MIST","page":"MIST","title":"MIST","text":"","category":"section"},{"location":"mist/","page":"MIST","title":"MIST","text":"Here we describe the interface we provide to the MIST v1.2 library of stellar evolutionary tracks. MIST specific code is housed in the MIST submodule, which can be accessed as","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"using StellarTracks.MIST # load all exported methods\nusing StellarTracks.MIST: MISTLibrary, X, Y, Z # load specific methods","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"The main papers describing the MIST family of stellar models are Dotter [1] and Choi et al. [12]. The tracks as provided by the MIST team here include the equivalent evolutionary points (EEPs) necessary to support robust isochrone creation and interpolation.","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"The MIST library has been widely used as it covers the full range of stellar masses and metallicities relevant for most studies of stellar populations. MIST includes stars with initial stellar masses from 0.1 to 300 solar masses and initial metallicities -4 le textMtextH le 05. MIST includes post-MS and post-RGB evolution (when appropriate). MIST also provides rotating (vvcrit=0.4) and non-rotating (vvcrit=0.0) models.","category":"page"},{"location":"mist/#Data-Acquisition","page":"MIST","title":"Data Acquisition","text":"","category":"section"},{"location":"mist/","page":"MIST","title":"MIST","text":"This package handles downloading and pre-processing of the MIST stellar tracks. The main access point we provide is MISTLibrary, which will load and make available the full library of stellar tracks. The first time you call this method, you will be prompted to download the required data files. The total data volume that will be downloaded is about 1.3 GB and will total 158 MB after processing. Information on customizing the install location is available here. The data can be uninstalled by running using DataDeps; rm(datadep\"MISTv1.2_vvcrit0.0\"; recursive=true); rm(datadep\"MISTv1.2_vvcrit0.4\"; recursive=true). With all the tracks available, we are able to perform operations like interpolating isochrones at any age and metallicity within the MIST parameter space.","category":"page"},{"location":"mist/#Table-Details","page":"MIST","title":"Table Details","text":"","category":"section"},{"location":"mist/","page":"MIST","title":"MIST","text":"The user guide for the MIST products is available here. The full MIST tracks contain 77 data columns originating from the MESA output. An description of the columns is available here. Currently, we process the raw tracks and only save the subset of columns given by StellarTracks.MIST.select_columns (see below). These columns are the ones most commonly needed for computing isochrones and applying bolometric corrections to compare against observed stellar populations. This choice is an optimization for storage space, load time, and development simplicity. If you require access to more columns, please submit an issue on the source repository and we can consider options.","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"using StellarTracks.MIST\nMIST.select_columns # These columns are saved from raw tracks","category":"page"},{"location":"mist/#Examples","page":"MIST","title":"Examples","text":"","category":"section"},{"location":"mist/","page":"MIST","title":"MIST","text":"Load the full MIST library of non-rotating models vvcrit=0, which is downloaded via DataDeps.jl if not already available. MIST also provides rotating models with vvcrit=0.4 which can be loaded with MISTLibrary(0.4).","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"using StellarTracks.MIST\np = MISTLibrary(0.0)","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"Use the MIST.MISTLibrary to interpolate an isochrone at log10(age [yr]) = 10.05 and metallicity textMtextH = -1234. The isochrone is returned as a NamedTuple.","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"iso = isochrone(p, 10.05, -1.234)","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"The NamedTuple returned by isochrone can be converted to table types, like TypedTables.Table to simplify further use.","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"using TypedTables: Table\nTable(iso)","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"The theoretical isochrone is plotted below.","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"plot_hr(iso) # hide","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"We can load a grid of bolometric corrections from BolometricCorrections.jl to add observational magnitudes to the theoretical isochrone. In this example, we use the MIST bolometric correction grid, which offers bolometric corrections for varying metallicities ([Fe/H]) and reddening values (A_V). This method returns a TypedTables.Table that contains the information from both sources. Here we evaluate an isochrone with log10(age [yr]) = 10.05, textMtextH = -1234, and A_v=002 mag. ","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"using BolometricCorrections.MIST: MISTBCGrid\nm = MISTBCGrid(\"JWST\")\niso = isochrone(p, m, 10.05, -1.234, 0.02)","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"All available columns in the isochrone can be obtained with TypedTables.columnnames.","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"using TypedTables: columnnames\ncolumnnames(iso)","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"A color-magnitude diagram constructed from the isochrone is plotted below.","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"plot_cmd(iso) # hide","category":"page"},{"location":"mist/#Chemistry-API","page":"MIST","title":"Chemistry API","text":"","category":"section"},{"location":"mist/","page":"MIST","title":"MIST","text":"We re-export the BolometricCorrections.MIST.MISTChemistry type defined in BolometricCorrections.jl that can be used to access information on the chemical mixture assumed for the MIST models. All models have scaled-solar chemical compositions.","category":"page"},{"location":"mist/#Library-API","page":"MIST","title":"Library API","text":"","category":"section"},{"location":"mist/#StellarTracks.MIST.MISTLibrary","page":"MIST","title":"StellarTracks.MIST.MISTLibrary","text":"MISTLibrary(vvcrit::Number=0)\n\nMISTLibrary implements the AbstractTrackLibrary interface for the MIST stellar evolution library. Instances can be constructed by providing a supported vvcrit argument for the rotation parameter, which must be equal to either 0 (no rotation) or 0.4. We set vvcrit=0 by default. If you construct an instance as p = MISTLibrary(0.0), it is callable as p(mh::Number, M::Number) which returns an InterpolatedTrack that interpolates between tracks to a specific metallicity ([M/H]) and initial stellar mass (M).\n\nThis type also supports isochrone construction (see isochrone).\n\nExamples\n\njulia> p = MISTLibrary(0.0)\nStructure of interpolants for the MIST library of stellar tracks with vvcrit=0.0. Valid range of metallicities is (-4.0, 0.5).\n\njulia> isochrone(p, 10.05, -2) isa NamedTuple\ntrue\n\njulia> p(-2.05, 1.05)\nInterpolatedTrack with M_ini=1.05, MH=-2.05, Z=0.0001327966689875739, Y=0.249199427865246, X=0.7506677754657665.\n\n\n\n\n\n","category":"type"},{"location":"mist/#StellarTracks.isochrone-Tuple{MISTLibrary, Number, Number}","page":"MIST","title":"StellarTracks.isochrone","text":"isochrone(p::MISTLibrary, logAge::Number, mh::Number)\n\nInterpolates properties of the stellar tracks in the library at the requested logarithmic age (logAge = log10(age [yr])) and logarithmic metallicity [M/H] = mh. Returns a NamedTuple containing the properties listed below:\n\neep: Equivalent evolutionary points\nm_ini: Initial stellar masses, in units of solar masses.\nlogTe: Base-10 logarithm of the effective temperature [K] of the stellar model.\nMbol: Bolometric luminosity of the stellar model.\nlogg: Surface gravity of the stellar model.\nlog_surf_cell_z: Base-10 logarithm of the surface metal mass fraction (Z).\n\n\n\n\n\n","category":"method"},{"location":"mist/#Track-Set-API","page":"MIST","title":"Track Set API","text":"","category":"section"},{"location":"mist/#StellarTracks.MIST.MISTTrackSet","page":"MIST","title":"StellarTracks.MIST.MISTTrackSet","text":"MISTTrackSet(mh::Number, vvcrit::Number=0)\n\nMISTTrackSet implements the AbstractTrackSet interface for the MIST stellar evolution library.\n\njulia> ts = StellarTracks.MIST.MISTTrackSet(0.0, 0.0)\nMISTTrackSet with MH=0.0, vvcrit=0.0, Z=0.0142014201420142, Y=0.2703270327032703, 1710 EEPs and 196 initial stellar mass points.\n\njulia> ts(1.01) # Interpolate track at new initial mass\nMISTTrack with M_ini=1.01, MH=0.0, vvcrit=0.0, Z=0.0142014201420142, Y=0.2703270327032703, X=0.7154715471547155.\n\njulia> isochrone(ts, 10.0) isa NamedTuple # Interpolate isochrone at `log10(age [yr]) = 10`\ntrue\n\n\n\n\n\n","category":"type"},{"location":"mist/#Individual-Tracks-API","page":"MIST","title":"Individual Tracks API","text":"","category":"section"},{"location":"mist/#StellarTracks.MIST.MISTTrack","page":"MIST","title":"StellarTracks.MIST.MISTTrack","text":"MISTTrack(mh::Number, mass::Number, vvcrit::Number=0)\n\nMISTTrack implements the AbstractTrack interface for the MIST stellar evolution library.\n\njulia> track = StellarTracks.MIST.MISTTrack(-2, 0.15, 0.0)\nMISTTrack with M_ini=0.15, MH=-2, vvcrit=0.0, Z=0.00014899227095992976, Y=0.24922374966753474, X=0.7506272580615054.\n\njulia> track(7.0) # interpolate track at log10(age [yr]) = 7\n(log_L = -1.5293719450743, log_Teff = 3.587337261741102, log_g = 4.447603584617846, log_surf_cell_z = -3.8450984758441953)\n\n\n\n\n\n","category":"type"},{"location":"mist/#PARSEC-References","page":"MIST","title":"PARSEC References","text":"","category":"section"},{"location":"mist/","page":"MIST","title":"MIST","text":"This page cites the following references:","category":"page"},{"location":"mist/","page":"MIST","title":"MIST","text":"A. Dotter. MESA ISOCHRONES AND STELLAR TRACKS (MIST) 0: METHODS FOR THE CONSTRUCTION OF STELLAR ISOCHRONES. ApJS 222, 8 (2016).\n\n\n\nJ. Choi, A. Dotter, C. Conroy, M. Cantiello, B. Paxton and B. D. Johnson. MESA ISOCHRONES AND STELLAR TRACKS (MIST). I. SOLAR-SCALED MODELS. ApJ 823, 102 (2016).\n\n\n\n","category":"page"},{"location":"api/#api","page":"API","title":"API","text":"","category":"section"},{"location":"api/#chemistry_api","page":"API","title":"Chemistry","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"We utilize the chemistry API from BolometricCorrections.jl to describe the chemistry of the stellar track libraries.","category":"page"},{"location":"api/#Individual-Tracks","page":"API","title":"Individual Tracks","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"An individual stellar track, containing the time evolution of properties for a single star, is represented by our AbstractTrack type. Different concrete implementations are used for different stellar evolution libraries, but all support the common access API defined below.","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#StellarTracks.AbstractTrack","page":"API","title":"StellarTracks.AbstractTrack","text":"Abstract supertype representing individual stellar tracks. Different concrete implementations are used for different stellar libraries, but all subtypes of AbstractTrack are guaranteed to support the generic API described in the documentation.\n\nThe main way to get the properties of the modeled star when it has a particular age, assuming track is a valid concrete instance, is to call the track with the logarithmic age track(log10(age)) where age is in years. This will return a NamedTuple containing the available properties (e.g., logL, logTe) of the modeled star at that age. Not all libraries will have the same properties available. \n\n\n\n\n\n","category":"type"},{"location":"api/#BolometricCorrections.gridname-Tuple{StellarTracks.AbstractTrack}","page":"API","title":"BolometricCorrections.gridname","text":"gridname(::Type{<:AbstractTrack})\n\nReturns a human-readable String identifier of the stellar evolution grid that tracks of the provided type are derived from. This should be provided for all track types.\n\ngridname(track::AbstractBCTable) = gridname(typeof(track))\n\nGeneric method provided to return the gridname for instances of concrete subtypes of AbstractTrack.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.extrema-Tuple{StellarTracks.AbstractTrack}","page":"API","title":"Base.extrema","text":"Base.extrema(t::AbstractTrack)\n\nReturns the minimum and maximum logarithmic age (log10(age [yr])) of the stellar model.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.keys-Tuple{StellarTracks.AbstractTrack}","page":"API","title":"Base.keys","text":"Base.keys(t::AbstractTrack)\n\nReturns a tuple of symbols that will be used to set the keys of the NamedTuples returned by t(logAge::Number).\n\n\n\n\n\n","category":"method"},{"location":"api/#StellarTracks.mass-Tuple{StellarTracks.AbstractTrack}","page":"API","title":"StellarTracks.mass","text":"mass(t::AbstractTrack)\n\nReturns the initial stellar mass of the modeled star in solar masses. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.chemistry-Tuple{StellarTracks.AbstractTrack}","page":"API","title":"BolometricCorrections.chemistry","text":"chemistry(t::AbstractTrack)\n\nReturns an instance of a subtype of AbstractChemicalMixture valid for the provided track t that can be used in other methods.\n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.X-Tuple{StellarTracks.AbstractTrack}","page":"API","title":"BolometricCorrections.X","text":"X(t::AbstractTrack)\n\nReturns the hydrogen mass fraction of the modeled star. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.Y-Tuple{StellarTracks.AbstractTrack}","page":"API","title":"BolometricCorrections.Y","text":"Y(t::AbstractTrack)\n\nReturns the helium mass fraction of the modeled star. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.Z-Tuple{StellarTracks.AbstractTrack}","page":"API","title":"BolometricCorrections.Z","text":"Z(t::AbstractTrack)\n\nReturns the metal mass fraction of the modeled star. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.MH-Tuple{StellarTracks.AbstractTrack}","page":"API","title":"BolometricCorrections.MH","text":"MH(t::AbstractTrack)\n\nReturns the logarithmic metal abundance of the modeled star, defined as [M/H] = log(Z/X) - log(Z⊙/X⊙). \n\n\n\n\n\n","category":"method"},{"location":"api/#StellarTracks.post_rgb-Tuple{StellarTracks.AbstractTrack}","page":"API","title":"StellarTracks.post_rgb","text":"post_rgb(t::AbstractTrack)\n\nReturns true if the track includes post-RGB evolution, false otherwise. \n\n\n\n\n\n","category":"method"},{"location":"api/#Concrete-Implementations","page":"API","title":"Concrete Implementations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"PARSEC.PARSECTrack\nMIST.MISTTrack\nBaSTIv1.BaSTIv1Track\nBaSTIv2.BaSTIv2Track\nStellarTracks.InterpolatedTrack","category":"page"},{"location":"api/#StellarTracks.InterpolatedTrack","page":"API","title":"StellarTracks.InterpolatedTrack","text":"InterpolatedTrack(track0, track1, track1_prefac, track2_prefac) <: AbstractTrack\n\nType allowing for linear interpolation between two stellar tracks of identical  mass but different metallicity (track0 and track1). Simple linear  interpolation between the two tracks is applied. The track can be evaluated  at a particular logarithmic age by calling (track::InterpolatedTrack)(logAge::Number). \n\nThe constructor for this type is considered internal and users should not construct this type directly. Rather, tracks of this type are constructed from track libraries by calling them with  the signature (tracklib::AbstractTrackLibrary)(mh::Number, M::Number) where  mh is the logarithmic metallicity [M/H] and M is the initial stellar mass in solar masses.\n\njulia> using StellarTracks.PARSEC: PARSECLibrary\n\njulia> p = PARSECLibrary();\n\njulia> track = p(-2.05, 1.05)\nInterpolatedTrack with M_ini=1.05, MH=-2.05, Z=0.00013856708164357998, Y=0.24874664940532557, X=0.7511147835130308.\n\njulia> track(9.0)\n(logTe = 3.8820487347062302, Mbol = 3.7411721770340987, logg = 4.521853108813156, C_O = 0.0)\n\n\n\n\n\n","category":"type"},{"location":"api/#Track-Sets","page":"API","title":"Track Sets","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"We define a \"track set\" to be a set of individual stellar tracks that share common properties (typically initial metallicity). By grouping these tracks together, we can interpolate between tracks in the set, create isochrones, and perform other similar operations.","category":"page"},{"location":"api/#API-2","page":"API","title":"API","text":"","category":"section"},{"location":"api/#StellarTracks.AbstractTrackSet","page":"API","title":"StellarTracks.AbstractTrackSet","text":"Abstract supertype representing a set of stellar tracks with common properties and supports common operations like interpolating between tracks and calculating isochrones. Specifically, it is assumed all individual tracks in a track set have identical initial metallicity and chemical composition. Subtypes of AbstractTrackSet are guaranteed to support the generic API described in the documentation.\n\nConcrete instances are callable with an initial stellar mass (in solar masses), returning an interpolated track at the requested mass. \n\n\n\n\n\n","category":"type"},{"location":"api/#BolometricCorrections.gridname-Tuple{StellarTracks.AbstractTrackSet}","page":"API","title":"BolometricCorrections.gridname","text":"gridname(::Type{<:AbstractTrackSet})\n\nReturns a human-readable String identifier of the stellar evolution grid that track sets of the provided type are derived from. This should be provided for all track set types.\n\ngridname(trackset::AbstractTrackSet) = gridname(typeof(trackset))\n\nGeneric method provided to return the gridname for instances of concrete subtypes of AbstractTrackSet.\n\n\n\n\n\n","category":"method"},{"location":"api/#StellarTracks.mass-Tuple{StellarTracks.AbstractTrackSet}","page":"API","title":"StellarTracks.mass","text":"mass(ts::AbstractTrackSet)\n\nReturns the initial stellar masses (in solar masses) of the individual tracks contained in the track set. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.chemistry-Tuple{StellarTracks.AbstractTrackSet}","page":"API","title":"BolometricCorrections.chemistry","text":"chemistry(ts::AbstractTrack)\n\nReturns an instance of a subtype of AbstractChemicalMixture valid for the provided track set ts that can be used in other methods.\n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.X-Tuple{StellarTracks.AbstractTrackSet}","page":"API","title":"BolometricCorrections.X","text":"X(ts::AbstractTrackSet)\n\nReturns the common hydrogen mass fraction of the tracks contained in the track set. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.Y-Tuple{StellarTracks.AbstractTrackSet}","page":"API","title":"BolometricCorrections.Y","text":"Y(ts::AbstractTrackSet)\n\nReturns the common helium mass fraction of the tracks contained in the track set. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.Z-Tuple{StellarTracks.AbstractTrackSet}","page":"API","title":"BolometricCorrections.Z","text":"Z(ts::AbstractTrackSet)\n\nReturns the common metal mass fraction of the tracks contained in the track set. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.MH-Tuple{StellarTracks.AbstractTrackSet}","page":"API","title":"BolometricCorrections.MH","text":"MH(ts::AbstractTrackSet)\n\nReturns the common logarithmic metal abundance of the tracks contained in the track set, defined as [M/H] = log(Z/X) - log(Z⊙/X⊙). \n\n\n\n\n\n","category":"method"},{"location":"api/#StellarTracks.post_rgb-Tuple{StellarTracks.AbstractTrackSet}","page":"API","title":"StellarTracks.post_rgb","text":"post_rgb(ts::AbstractTrackSet)\n\nReturns true if the tracks in the track set include post-RGB evolution, false otherwise. \n\n\n\n\n\n","category":"method"},{"location":"api/#StellarTracks.isochrone-Tuple{StellarTracks.AbstractTrackSet, Number}","page":"API","title":"StellarTracks.isochrone","text":"isochrone(ts::AbstractTrackSet, logAge::Number)\n\nInterpolates properties of the stellar tracks in the track set at the requested logarithmic age (logAge = log10(age [yr])). Returns a NamedTuple containing the properties; different libraries may have different properties available. If result = isochrone(...), EEP points are generally available as result.eep and the corresponding initial stellar masses are result.m_ini.\n\njulia> using StellarTracks.MIST\n\njulia> ts = MISTTrackSet(-1, 0); # Load set of MIST tracks with [M/H] = -1, vvcrit=0\n\njulia> isochrone(ts, 10.0) isa NamedTuple\ntrue\n\n\n\n\n\n","category":"method"},{"location":"api/#StellarTracks.isochrone-Tuple{StellarTracks.AbstractTrackSet, BolometricCorrections.AbstractBCTable, Number}","page":"API","title":"StellarTracks.isochrone","text":"isochrone(ts::StellarTracks.AbstractTrackSet,\n          bc::BolometricCorrections.AbstractBCTable,\n          logAge::Number)\n\nReturns an isochrone as a TypedTables.Table calculated using the stellar evolutionary tracks contained in ts with bolometric corrections interpolated from the provided table bc at the logarithmic age logAge. Column names can be retrieved with TypedTables.columnnames. The result can be converted to a matrix with Tables.matrix.\n\nusing StellarTracks, BolometricCorrections\np = PARSECLibrary()    # Load PARSEC library of stellar models\nm = MISTBCGrid(\"JWST\") # Load MIST library of BCs\nisochrone(p.ts[1], m(MH(p.ts[1]), 0.0), 10.0)\n\nTable with 35 columns and 1323 rows:\n...\n\n\n\n\n\n","category":"method"},{"location":"api/#Concrete-Implementations-2","page":"API","title":"Concrete Implementations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"PARSEC.PARSECTrackSet\nMIST.MISTTrackSet\nBaSTIv1.BaSTIv1TrackSet\nBaSTIv2.BaSTIv2TrackSet","category":"page"},{"location":"api/#Track-Libraries","page":"API","title":"Track Libraries","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"For ease of use, our main entry point is the AbstractTrackLibrary, which loads and organizes all stellar tracks available from a given library (e.g., PARSEC). Once all tracks have been loaded, subsets with common chemical compositions can be extracted. Individual tracks and isochrones can also be interpolated directly from the library instance. However, the interfaces for these interpolations are not generic as not all libraries offer the same variations in initial chemistry – e.g., most will offer variation in total metallicity (i.e., Z), but some also include variation in alpha-element abundances. These methods are documented separately for each stellar library under their unique pages in the left panel.","category":"page"},{"location":"api/#API-3","page":"API","title":"API","text":"","category":"section"},{"location":"api/#StellarTracks.AbstractTrackLibrary","page":"API","title":"StellarTracks.AbstractTrackLibrary","text":"Abstract supertype for loading the full set of all stellar tracks available from a given library (e.g., PARSEC). For some libraries (e.g., MIST), there are different model sets for other stellar input parameters (e.g., rotation vvcrit in MIST) that are not interpolated over – these should be provided as arguments to the concrete type constructors.\n\nThese are typically assembled as a collection of individual track sets, with one track set constructed for each unique set of stellar chemical compositions (i.e., [M/H]). For more details, see the documentation for AbstractTrackSet.\n\nConcrete subtypes must implement an isochrone interpolation method. A generic method for the call signature isochrone(tracklib::AbstractTrackLibrary, logAge::Number, mh::Number) is provided. This generic method should work as long as the concrete subtype follows the chemistry API and has a field tracklib.ts containing the individual tracksets that make up the library. The tracksets must support isochrone interpolation via a method isochrone(ts::<your_type_here>, logAge::Number).\n\nConcrete instances must support interpolation of stellar tracks at user-provided metallicities and initial stellar masses. A generic method is implemented via the signature (tracklib::AbstractTrackLibrary)(mh::Number, M::Number). This method interpolates the tracklib at logarithmic metallicity [M/H] = mh and stellar initial mass M, returning an InterpolatedTrack that can be called to evaluate the track.\n\n\n\n\n\n","category":"type"},{"location":"api/#BolometricCorrections.gridname-Tuple{StellarTracks.AbstractTrackLibrary}","page":"API","title":"BolometricCorrections.gridname","text":"gridname(::Type{<:AbstractTrackLibrary})\n\nReturns a human-readable String identifier of the stellar evolution grid type provided. This should be provided for all track set types.\n\ngridname(tracklib::AbstractTrackLibrary) = gridname(typeof(tracklib))\n\nGeneric method provided to return the gridname for instances of concrete subtypes of AbstractTrackLibrary.\n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.chemistry-Tuple{StellarTracks.AbstractTrackLibrary}","page":"API","title":"BolometricCorrections.chemistry","text":"chemistry(tl::AbstractTrackLibrary)\n\nReturns an instance of a subtype of AbstractChemicalMixture valid for the provided track library tl that can be used in other methods.\n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.X-Tuple{StellarTracks.AbstractTrackLibrary}","page":"API","title":"BolometricCorrections.X","text":"X(tl::AbstractTrackLibrary)\n\nReturns the hydrogen mass fractions of the track sets  contained in the track library. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.Y-Tuple{StellarTracks.AbstractTrackLibrary}","page":"API","title":"BolometricCorrections.Y","text":"Y(tl::AbstractTrackLibrary)\n\nReturns the helium mass fractions of the track sets contained in the track library. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.Z-Tuple{StellarTracks.AbstractTrackLibrary}","page":"API","title":"BolometricCorrections.Z","text":"Z(tl::AbstractTrackLibrary)\n\nReturns the metal mass fractions of the track sets contained in the track library. \n\n\n\n\n\n","category":"method"},{"location":"api/#BolometricCorrections.MH-Tuple{StellarTracks.AbstractTrackLibrary}","page":"API","title":"BolometricCorrections.MH","text":"MH(tl::AbstractTrackLibrary)\n\nReturns the logarithmic metal abundances of the track sets  contained in the track library,  defined as [M/H] = log(Z/X) - log(Z⊙/X⊙). \n\n\n\n\n\n","category":"method"},{"location":"api/#StellarTracks.post_rgb-Tuple{StellarTracks.AbstractTrackLibrary}","page":"API","title":"StellarTracks.post_rgb","text":"post_rgb(tl::AbstractTrackLibrary)\n\nReturns true if any of the track sets in the track library include post-RGB evolution,  false otherwise. \n\n\n\n\n\n","category":"method"},{"location":"api/#StellarTracks.isochrone-Tuple{StellarTracks.AbstractTrackLibrary, Number, Number}","page":"API","title":"StellarTracks.isochrone","text":"isochrone(tracklib::AbstractTrackLibrary, logAge::Number, mh::Number)\n\nInterpolates properties of the stellar tracks in the track library at the requested logarithmic age (logAge = log10(age [yr])) and metallicity [M/H] = mh. Returns a NamedTuple containing the properties; different libraries may have different properties available. If result = isochrone(...), EEP points are generally available as result.eep and the corresponding initial stellar masses are result.m_ini.\n\njulia> using StellarTracks.MIST\n\njulia> p = MISTLibrary(0.0); # Load the library of MIST tracks with vvcrit=0\n\njulia> isochrone(p, 10.0, -1.65) isa NamedTuple\ntrue\n\n\n\n\n\n","category":"method"},{"location":"api/#StellarTracks.isochrone-Tuple{StellarTracks.AbstractTrackLibrary, BolometricCorrections.AbstractBCTable, Number, Number}","page":"API","title":"StellarTracks.isochrone","text":"isochrone(tracklib::AbstractTrackLibrary,\n          bc::BolometricCorrections.AbstractBCTable,\n          logAge::Number,\n          mh::Number)\n\nReturns an isochrone as a TypedTables.Table calculated using the stellar evolutionary tracks contained in tracklib with bolometric corrections interpolated from the provided table bc at the logarithmic age logAge and metallicity [M/H] = mh. Column names can be retrieved with TypedTables.columnnames. The result can be converted to a matrix with Tables.matrix.\n\nusing StellarTracks, BolometricCorrections\np = MISTLibrary(0.0)   # Load MIST library of non-rotating stellar models\nm = MISTBCGrid(\"JWST\") # Load MIST library of BCs\nisochrone(p, m(-1.01, 0.0), 10.0, -1.01)\n\nTable with 36 columns and 1465 rows:\n...\n\n\n\n\n\n","category":"method"},{"location":"api/#Concrete-Implementations-3","page":"API","title":"Concrete Implementations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"PARSEC.PARSECLibrary\nMIST.MISTLibrary\nBaSTIv1.BaSTIv1Library\nBaSTIv2.BaSTIv2Library","category":"page"},{"location":"parsec/#PARSEC","page":"PARSEC","title":"PARSEC","text":"","category":"section"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"Here we describe the interface we provide to the PARSEC v1.2S library of stellar evolutionary tracks. PARSEC specific code is housed in the PARSEC submodule, which can be accessed as","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"using StellarTracks.PARSEC # load all exported methods\nusing StellarTracks.PARSEC: PARSECLibrary, X, Y, Z # load specific methods","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"The main paper describing the PARSEC family of stellar models is Bressan et al. [2], but the library of stellar models has been expanded over the years to add and improve coverage of various parameter spaces. A non-exhaustive list of papers presenting the PARSEC models up to V1.2S is provided below.","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"Bressan et al. [2] is the first paper presenting the PARSEC models.\nChen et al. [3] presented an improved calibration for low-mass stars.\nTang et al. [4] and Chen et al. [5] presented new models of high-mass stars from 14 to 350 M⊙ with metallicities from 0001 le Z le 0004.\nRosenfield et al. [6] formulated equivalent evolutionary points (EEPs) for the PARSEC models to support use in isochrone interpolation routines. Our implementation uses their data products.\nMarigo et al. [7] augmented the PARSEC models with COLIBRI models of the thermally pulsating asymptotic giant branch phase (TP-AGB).\nPastorelli et al. [8] and Pastorelli et al. [9] compared the COLIBRI TP-AGB models to observations of the SMC and LMC, respectively.","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"The full list of relevant papers maintained by the group is available here.","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"As we use the PARSEC V1.2S tracks augmented with EEP points by Rosenfield et al. [6], we do not currently support the more recent PARSEC V2.0 tracks [10, 11]. We hope to add V2.0 in the future, but doing so would require new measurements of the EEP points which we do not presently support.","category":"page"},{"location":"parsec/#Data-Acquisition","page":"PARSEC","title":"Data Acquisition","text":"","category":"section"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"This package handles downloading and pre-processing of the EEP tracks produced by Rosenfield et al. [6] (available here) using DataDeps.jl. The main access point we provide is PARSECLibrary, which will load and make available the full library of stellar tracks. The first time you call this method, you will be prompted to download the required data files. The total data volume is ~150 MB after processing. Information on customizing the install location is available here. The data can be uninstalled by running using DataDeps; rm(datadep\"PARSECv1.2S\"; recursive=true). With all the tracks available, we are able to perform operations like interpolating isochrones at any age and metallicity within the PARSEC parameter space.","category":"page"},{"location":"parsec/#Examples","page":"PARSEC","title":"Examples","text":"","category":"section"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"First we load the full PARSEC library, which is downloaded via DataDeps.jl if not already available.","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"using StellarTracks.PARSEC\np = PARSECLibrary()","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"Now we use the PARSEC.PARSECLibrary to interpolate an isochrone at log10(age [yr]) = 10.05 and logarithmic metallicity [M/H]=-1.234. The isochrone is returned as a NamedTuple.","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"iso = isochrone(p, 10.05, -1.234)","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"The NamedTuple returned by isochrone can be converted to table types, like TypedTables.Table to simplify further use.","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"using TypedTables: Table\nTable(iso)","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"The theoretical isochrone is plotted below.","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"plot_hr(iso) # hide","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"We can load a grid of bolometric corrections from BolometricCorrections.jl to add observational magnitudes to the theoretical isochrone. In this example, we use the MIST bolometric correction grid, which offers bolometric corrections for varying metallicities ([M/H]) and reddening values (A_V).","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"Because the solar metallicity calibrations of PARSEC and MIST are not exactly the same, the protostellar metal mass fraction Z that corresponds to a given [M/H] is not the same between the two libraries. The isochrone interface will convert the given [M/H], which is assumed to be the desired metallicity in the stellar track library, to its corresponding metal mass fraction, and then convert from the metal mass fraction to the correct [M/H] for the assumed chemical model of the bolometric correction grid.","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"This method returns a TypedTables.Table that contains the information from both sources. Here we evaluate an isochrone with log10(age [yr]) = 10.05, [M/H]=-1.234, and A_v=002 mag. ","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"using BolometricCorrections.MIST: MISTBCGrid\nm = MISTBCGrid(\"JWST\")\niso = isochrone(p, m, 10.05, -1.234, 0.02)","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"All available columns in the isochrone can be obtained with TypedTables.columnnames.","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"using TypedTables: columnnames\ncolumnnames(iso)","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"A color-magnitude diagram constructed from the isochrone is plotted below.","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"plot_cmd(iso) # hide","category":"page"},{"location":"parsec/#Chemistry-API","page":"PARSEC","title":"Chemistry API","text":"","category":"section"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"We use the BolometricCorrections.YBC.PARSECChemistry type to provide information on the chemical mixture assumed for the PARSEC models.","category":"page"},{"location":"parsec/#Library-API","page":"PARSEC","title":"Library API","text":"","category":"section"},{"location":"parsec/#StellarTracks.PARSEC.PARSECLibrary","page":"PARSEC","title":"StellarTracks.PARSEC.PARSECLibrary","text":"PARSECLibrary()\n\nPARSECLibrary implements the AbstractTrackLibrary interface for the PARSEC stellar evolution library. If you construct an instance as p = PARSECLibrary(), it is callable as p(mh::Number, M::Number) which returns  an InterpolatedTrack that interpolates between tracks to a specific metallicity ([M/H]) and initial stellar mass (M).\n\nThis type also supports isochrone construction (see isochrone).\n\nExamples\n\njulia> p = PARSECLibrary()\nStructure of interpolants for PARSEC v1.2S library of stellar tracks. Valid range of metal mass fraction Z is (0.0001, 0.06).\n\njulia> isochrone(p, 10.05, -0.76) isa NamedTuple\ntrue\n\njulia> p(-2.05, 1.05)\nInterpolatedTrack with M_ini=1.05, MH=-2.05, Z=0.00013856708164357998, Y=0.24874664940532557, X=0.7511147835130308.\n\n\n\n\n\n","category":"type"},{"location":"parsec/#StellarTracks.isochrone-Tuple{PARSECLibrary, Number, Number}","page":"PARSEC","title":"StellarTracks.isochrone","text":"isochrone(p::PARSECLibrary, logAge::Number, mh::Number)\n\nInterpolates properties of the stellar tracks in the library at the requested logarithmic age (logAge = log10(age [yr])) and logarithmic metallicity mh. Returns a NamedTuple containing the properties listed below:\n\neep: Equivalent evolutionary points\nm_ini: Initial stellar masses, in units of solar masses.\nlogTe: Base-10 logarithm of the effective temperature [K] of the stellar model.\nMbol: Bolometric luminosity of the stellar model.\nlogg: Surface gravity of the stellar model calculated as -10.616 + log10(mass) + 4 * logTe - (4.77 - Mbol) / 2.5.\nC_O: Photospheric C/O ratio (the ZAMS value is used before the TP-AGB).\n\n\n\n\n\n","category":"method"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"The full library is principally a set of PARSECTrackSets, with one track set per unique chemical composition. All PARSEC models have scaled-solar chemical compositions, so they vary only in total metallicity (i.e., Z). ","category":"page"},{"location":"parsec/#Track-Set-API","page":"PARSEC","title":"Track Set API","text":"","category":"section"},{"location":"parsec/#StellarTracks.PARSEC.PARSECTrackSet","page":"PARSEC","title":"StellarTracks.PARSEC.PARSECTrackSet","text":"PARSECTrackSet(zval::Number)\n\nPARSECTrackSet implements the AbstractTrackSet interface for the PARSEC stellar evolution library.\n\njulia> ts = StellarTracks.PARSEC.PARSECTrackSet(0.0001)\nTrackSet with Y=0.248678, Z=0.0001, 1930 EEPs and 104 initial stellar mass points.\n\njulia> ts(1.01) # Interpolate track at new initial mass\nPARSECTrack with M_ini=1.01, MH=-2.191722058538173, Z=0.0001, Y=0.248678, X=0.7512220000000001.\n\njulia> isochrone(ts, 10.0) isa NamedTuple # Interpolate isochrone at `log10(age [yr]) = 10`\ntrue\n\n\n\n\n\n","category":"type"},{"location":"parsec/#Individual-Tracks-API","page":"PARSEC","title":"Individual Tracks API","text":"","category":"section"},{"location":"parsec/#StellarTracks.PARSEC.PARSECTrack","page":"PARSEC","title":"StellarTracks.PARSEC.PARSECTrack","text":"PARSECTrack(zval::Number, mass::Number)\n\nPARSECTrack implements the AbstractTrack interface for the PARSEC stellar evolution library.\n\nNote that due to the organization of the PARSEC data files, this method requires constructing a PARSECTrackSet and is therefore not efficient if your aim is to construct multiple tracks of the same metallicity zval. In this case, you should construct a PARSECTrackSet and call it with the masses you want, e.g., ts = PARSECTrackSet(0.0001); ts.([0.12, 0.15]). \n\njulia> track = StellarTracks.PARSEC.PARSECTrack(0.0001, 0.15)\nPARSECTrack with M_ini=0.15, MH=-2.191722058538173, Z=0.0001, Y=0.248678, X=0.7512220000000001.\n\njulia> track(7.0) # interpolate track at log10(age [yr]) = 7\n(logTe = 3.6015066653099757, Mbol = 8.518315848633081, logg = 4.464972304683626, C_O = 0.0)\n\n\n\n\n\n","category":"type"},{"location":"parsec/#PARSEC-References","page":"PARSEC","title":"PARSEC References","text":"","category":"section"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"This page cites the following references:","category":"page"},{"location":"parsec/","page":"PARSEC","title":"PARSEC","text":"A. Bressan, P. Marigo, L. Girardi, B. Salasnich, C. Dal Cero, S. Rubele and A. Nanni. PARSEC : stellar tracks and isochrones with the PAdova and TRieste Stellar Evolution Code. MNRAS 427, 127–145 (2012).\n\n\n\nY. Chen, L. Girardi, a. Bressan, P. Marigo, M. Barbieri and X. Kong. Improving PARSEC models for very low mass stars. MNRAS 444, 2525–2543 (2014).\n\n\n\nJ. Tang, A. Bressan, P. Rosenfield, A. Slemer, P. Marigo, L. Girardi and L. Bianchi. New PARSEC evolutionary tracks of massive stars at low metallicity: testing canonical stellar evolution in nearby star-forming dwarf galaxies. MNRAS 445, 4287–4305 (2014). Accessed on Mar 24, 2024. ADS Bibcode: 2014MNRAS.445.4287T.\n\n\n\nY. Chen, A. Bressan, L. Girardi, P. Marigo, X. Kong and A. Lanza. PARSEC evolutionary tracks of massive stars up to 350 M⊙ at metallicities 0.0001 ≤ Z ≤ 0.04. MNRAS 452, 1068–1080 (2015). Accessed on Mar 24, 2024. ADS Bibcode: 2015MNRAS.452.1068C.\n\n\n\nP. Rosenfield, P. Marigo, L. Girardi, J. J. Dalcanton, A. Bressan, B. F. Williams and A. Dolphin. Evolution of Thermally Pulsing Asymptotic Giant Branch Stars. V. Constraining the Mass Loss and Lifetimes of Intermediate-mass, Low-metallicity AGB Stars. ApJ 822, 73 (2016). Accessed on Aug 24, 2024. ADS Bibcode: 2016ApJ...822...73R.\n\n\n\nP. Marigo, L. Girardi, A. Bressan, P. Rosenfield, B. Aringer, Y. Chen, M. Dussin, A. Nanni, G. Pastorelli, T. S. Rodrigues, M. Trabucchi, S. Bladh, J. Dalcanton, M. A. Groenewegen, J. Montalbán and P. R. Wood. A New Generation of PARSEC-COLIBRI Stellar Isochrones Including the TP-AGB Phase. ApJ 835, 77 (2017). Accessed on Aug 21, 2024. ADS Bibcode: 2017ApJ...835...77M.\n\n\n\nG. Pastorelli, P. Marigo, L. Girardi, Y. Chen, S. Rubele, M. Trabucchi, B. Aringer, S. Bladh, A. Bressan, J. Montalbán, M. L. Boyer, J. J. Dalcanton, K. Eriksson, M. A. Groenewegen, S. Höfner, T. Lebzelter, A. Nanni, P. Rosenfield, P. R. Wood and M.-R. L. Cioni. Constraining the thermally pulsing asymptotic giant branch phase with resolved stellar populations in the Small Magellanic Cloud. MNRAS 485, 5666–5692 (2019). Accessed on Mar 24, 2024. ADS Bibcode: 2019MNRAS.485.5666P.\n\n\n\nG. Pastorelli, P. Marigo, L. Girardi, B. Aringer, Y. Chen, S. Rubele, M. Trabucchi, S. Bladh, M. L. Boyer, A. Bressan, J. J. Dalcanton, M. A. Groenewegen, T. Lebzelter, N. Mowlavi, K. L. Chubb, M.-R. L. Cioni, R. de Grijs, V. D. Ivanov, A. Nanni, J. T. van Loon and S. Zaggia. Constraining the thermally pulsing asymptotic giant branch phase with resolved stellar populations in the Large Magellanic Cloud. MNRAS 498, 3283–3301 (2020). Accessed on Mar 24, 2024. ADS Bibcode: 2020MNRAS.498.3283P.\n\n\n\nC. Nguyen, G. Costa, L. Girardi, G. Volpato, A. Bressan, Y. Chen, P. Marigo, X. Fu and P. Goudfrooij. PARSEC V2.0: Stellar tracks and isochrones of low- and intermediate-mass stars with rotation. Astronomy & Astrophysics 665, A126 (2022), arXiv:2207.08642 [astro-ph.SR].\n\n\n\nG. Costa, K. Shepherd, A. Bressan, F. Addari, Y. Chen, X. Fu, G. Volpato, C. Nguyen, L. Girardi, P. Marigo, A. Mazzi, G. Pastorelli, M. Trabucchi, D. Bossini and S. Zaggia. Evolutionary tracks, ejecta, and ionizing photons from intermediate-mass to very massive stars with PARSEC. Astronomy & Astrophysics 694, A193 (2025), arXiv:2501.12917 [astro-ph.SR].\n\n\n\n","category":"page"},{"location":"basti_v1/#BaSTIv1","page":"BaSTIv1","title":"BaSTIv1","text":"","category":"section"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"Here we describe the interface we provide to the older BaSTI stellar models presented in Pietrinferni et al. [13], Pietrinferni et al. [14] and Pietrinferni et al. [15] – as there are newer BaSTI models (e.g., Hidalgo et al. [16]), we describe these older models as BaSTIv1 to differentiate them. BaSTIv1 specific code is housed in the BaSTIv1 submodule, which can be accessed as","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"using StellarTracks.BaSTIv1 # load all exported methods\nusing StellarTracks.BaSTIv1: BaSTIv1Library, X, Y, Z # load specific methods","category":"page"},{"location":"basti_v1/#Data-Acquisition","page":"BaSTIv1","title":"Data Acquisition","text":"","category":"section"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"The tracks will be downloaded automatically using DataDeps.jl the first time you try to access them. The main access point we provide is BaSTIv1Library, which will load and make available the full library of stellar tracks. The first time you call this method, you will be prompted to download the required data files. The total data volume is ~100 MB. Information on customizing the install location is available here. The data can be uninstalled by running using DataDeps; rm(datadep\"BaSTIv1\"; recursive=true). With all the tracks available, we are able to perform operations like interpolating isochrones at any age and metallicity within the BaSTIv1 parameter space.","category":"page"},{"location":"basti_v1/#Grid-Properties","page":"BaSTIv1","title":"Grid Properties","text":"","category":"section"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"The BaSTIv1 model grid contains models for the following metal mass fractions:","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"BaSTIv1.zgrid","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"which correspond to the following values of [M/H]:","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"MH.(BaSTIv1Chemistry(), BaSTIv1.zgrid)","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"The grid contains models with and without convective overshooting during core H-burning (function arguments canonical=false and true, respectively), with and without a synthetic AGB extension (agb = true and false, respectively), and different values of the Reimers mass loss parameter η = 0.2, 0.4. Values of Z=1e-5, 0.05 (models presented in Pietrinferni et al. [15]) are only available without AGB extension (agb=false) with Reimers mass loss parameter η=0.4. α-enhanced models with [α/Fe] ≈ 0.4 (presented in Pietrinferni et al. [14]) are also available.","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"Note that the BaSTIv1 stellar models at best include initial stellar masses from 0.5 to 10 solar masses. The canonical models (canonical = true) without AGB extensions (agb = false) and η=0.4 seem to have the best mass sampling, and the α-enhanced set is also fairly good. Many of the other parameter sets have minimum masses closer to 1 solar mass, which can be troublesome for applications in stellar populations. None of the model sets reach the lower main sequence that is important when modeling very nearby stellar populations. Nor do they include very high-mass stars (e.g., O-type stars) that can be important when studying populations with high present0-day SFRs.","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"The BaSTIv1 grid includes models with scaled-solar abundance patterns as well as α-enhanced models with an average [α/Fe]=0.4 (presented in Pietrinferni et al. [14]). These α-enhanced models are useful for modeling low-metallicity stars that formed prior to significant iron enrichment from type Ia supernovae. These stars are most common in the Galactic halo and low-mass dwarf galaxies. Note that the conversion between metal mass fraction Z and logarithmic metal abundance [M/H] is the same for the scaled-solar models as for the α-enhanced models, however the iron abundance [Fe/H] is not the same as [M/H] – see Table 1 of Pietrinferni et al. [14].","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"The BaSTIv1 models are also differentiated by whether they include convective overshooting during central H-burning. So-called \"canonical\" models do not including overshooting, while \"non-canonical\" models do include a convective overshooting treatment (see section 3 of Pietrinferni et al. [13]). Inclusion of convective overshooting during central H-burning mainly changes the main sequence turn-off morphology and generally results in better fits to simple stellar populations like globular clusters. For methods in this module that take a canonical::Bool argument, a value of canonical=true indicates you want to use the \"canonical\" stellar models, while a value of canonical=false means you want to use the \"non-canonical\" models that include convective core overshooting.","category":"page"},{"location":"basti_v1/#Examples","page":"BaSTIv1","title":"Examples","text":"","category":"section"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"First we load the full BaSTIv1 library, which is downloaded via DataDeps.jl if not already available.","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"using StellarTracks.BaSTIv1\np = BaSTIv1Library(0.0, true, false, 0.4)","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"Now we use the BaSTIv1Library to interpolate an isochrone at log10(age [yr]) = 10.05 and logarithmic metallicity [M/H]=-1.234. The isochrone is returned as a NamedTuple.","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"iso = isochrone(p, 10.05, -1.234)","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"The NamedTuple returned by isochrone can be converted to table types, like TypedTables.Table to simplify further use.","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"using TypedTables: Table\nTable(iso)","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"The theoretical isochrone is plotted below.","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"plot_hr(iso) # hide","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"We can load a grid of bolometric corrections from BolometricCorrections.jl to add observational magnitudes to the theoretical isochrone. In this example, we use the MIST bolometric correction grid, which offers bolometric corrections for varying metallicities ([M/H]) and reddening values (A_V).","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"Because the solar metallicity calibrations of BaSTIv1 and MIST are not exactly the same, the protostellar metal mass fraction Z that corresponds to a given [M/H] is not the same between the two libraries. The isochrone interface will convert the given [M/H], which is assumed to be the desired metallicity in the stellar track library, to its corresponding metal mass fraction, and then convert from the metal mass fraction to the correct [M/H] for the assumed chemical model of the bolometric correction grid.","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"This method returns a TypedTables.Table that contains the information from both sources. Here we evaluate an isochrone with log10(age [yr]) = 10.05, [M/H]=-1.234, and A_v=002 mag. ","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"using BolometricCorrections.MIST: MISTBCGrid\nm = MISTBCGrid(\"JWST\")\niso = isochrone(p, m, 10.05, -1.234, 0.02)","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"All available columns in the isochrone can be obtained with TypedTables.columnnames.","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"using TypedTables: columnnames\ncolumnnames(iso)","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"A color-magnitude diagram constructed from the isochrone is plotted below.","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"plot_cmd(iso) # hide","category":"page"},{"location":"basti_v1/#Chemistry-API","page":"BaSTIv1","title":"Chemistry API","text":"","category":"section"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"We provide the StellarTracks.BaSTIv1.BaSTIv1Chemistry type that follows the chemistry API defined in BolometricCorrections.jl to access information on the chemical mixture assumed for the BaSTIv1 models.","category":"page"},{"location":"basti_v1/#StellarTracks.BaSTIv1.BaSTIv1Chemistry","page":"BaSTIv1","title":"StellarTracks.BaSTIv1.BaSTIv1Chemistry","text":"BaSTIv1Chemistry()\n\nReturns a singleton struct representing the BaSTIv1 chemical mixture model. These older BaSTI models, presented in Pietrinferni et al. [13], Pietrinferni et al. [14] and Pietrinferni et al. [15], include both solar-scaled chemical compositions and α-enhanced compositions with [α/Fe] ≈ 0.4. The relation between the metal mass fraction Z and the logarithmic metal abundance [M/H] is the same for the solar-scaled and α-enhanced models, although the relation between the iron abundance and the overall metal abundance is not the same – [Fe/H] = [M/H] - 0.75 * [α/Fe]; see, e.g., Equation 4 of Vazdekis et al. [17].\n\nThe solar protostellar chemical mixture for these models was calibrated to reproduce solar photospheric observations via a forward modeling approach (see section 4 of Pietrinferni et al. [13]). The distribution of heavy metals is taken from Grevesse and Noels [18], which the authors state is minimally different from Grevesse and Sauval [19].\n\njulia> using StellarTracks.BaSTIv1: BaSTIv1Chemistry, X, Y, Z, X_phot, Y_phot, Z_phot, MH;\n\njulia> chem = BaSTIv1Chemistry();\n\njulia> X(chem) + Y(chem) + Z(chem) ≈ 1 # solar protostellar values\ntrue\n\njulia> X_phot(chem) + Y_phot(chem) + Z_phot(chem) ≈ 1 # solar photospheric values\ntrue\n\njulia> MH(chem, Z(chem) * 0.1) ≈ -0.9659287781921233\ntrue\n\njulia> Z(chem, -0.9659287781921233) ≈ Z(chem) * 0.1\ntrue\n\n\n\n\n\n","category":"type"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"Note that in our conversions between Z and [M/H], remembering that MH = log10(Z/X) - log10(Z⊙/X⊙), we use the photospheric solar values for Z⊙ and X⊙ (these are defined in section 4 of Pietrinferni et al. [13]). This reproduces the relation between Z and [M/H] defined in Table 1 of Pietrinferni et al. [13].","category":"page"},{"location":"basti_v1/#Library-API","page":"BaSTIv1","title":"Library API","text":"","category":"section"},{"location":"basti_v1/#StellarTracks.BaSTIv1.BaSTIv1Library","page":"BaSTIv1","title":"StellarTracks.BaSTIv1.BaSTIv1Library","text":"BaSTIv1Library(α_fe::Number=0, canonical::Bool=true, agb::Bool=false, η::Number=0.4)\n\nBaSTIv1Library implements the AbstractTrackLibrary interface for the older BaSTI stellar evolution models presented in Pietrinferni et al. [13], Pietrinferni et al. [14] and Pietrinferni et al. [15].\n\nOptional Arguments\n\nα_fe::Number = 0: [α/Fe] of stellar model.\ncanonical::Bool = false: Whether to use models with convective overshooting (true) or without (false).\nagb::Bool = false: Whether to use models with the synthetic AGB extension (true) or without (false).\nη::Number = 0.4: Reimers mass loss parameter used to calculate the stellar model.\n\nIf you construct an instance as p = BaSTIv1Library(0.0, true, false, 0.4), it is callable as p(mh::Number, M::Number) which returns an InterpolatedTrack that interpolates between tracks to a specific metallicity ([M/H]) and initial stellar mass (M).\n\nThis type also supports isochrone construction (see isochrone).\n\nExamples\n\njulia> p = BaSTIv1Library(0.0, true, false, 0.4)\nStructure of interpolants for the older BaSTI library of canonical stellar tracks without AGB extension, [α/Fe]=0.0, η=0.4. Valid range of metallicities is (-3.265322279085031, 0.5088071641379128).\n\njulia> isochrone(p, 10.05, -2.01) isa NamedTuple\ntrue\n\njulia> p(-2.05, 1.05)\nInterpolatedTrack with M_ini=1.05, MH=-2.05, Z=0.0001641003350386593, Y=0.24522974046905413, X=0.7546061591959072.\n\n\n\n\n\n","category":"type"},{"location":"basti_v1/#StellarTracks.isochrone-Tuple{BaSTIv1Library, Number, Number}","page":"BaSTIv1","title":"StellarTracks.isochrone","text":"isochrone(p::BaSTIv1Library, logAge::Number, mh::Number)\n\nInterpolates properties of the stellar tracks in the library at the requested logarithmic age (logAge = log10(age [yr])) and logarithmic metallicity [M/H] = mh. Returns a NamedTuple containing the properties listed below:\n\neep: Equivalent evolutionary points\nm_ini: Initial stellar masses, in units of solar masses.\nlogTe: Base-10 logarithm of the effective temperature [K] of the stellar model.\nMbol: Bolometric luminosity of the stellar model.\nlogg: Surface gravity of the stellar model.\n\n\n\n\n\n","category":"method"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"The full library is principally a set of BaSTIv1TrackSets, with one track set per unique chemical composition. We do not presently offer interpolation as a function of [α/Fe] or between the canonical and non-canonical models, so the individual track sets in the library vary only in total metallicity (i.e., Z).","category":"page"},{"location":"basti_v1/#Track-Set-API","page":"BaSTIv1","title":"Track Set API","text":"","category":"section"},{"location":"basti_v1/#StellarTracks.BaSTIv1.BaSTIv1TrackSet","page":"BaSTIv1","title":"StellarTracks.BaSTIv1.BaSTIv1TrackSet","text":"BaSTIv1TrackSet(zval::Number, α_fe::Number=0, canonical::Bool=true, agb::Bool=false, η::Number=0.4)\n\nBaSTIv1TrackSet implements the AbstractTrackSet interface for the older BaSTI stellar evolution library [13–15].\n\nArguments\n\nzval::Number: Metal mass fraction of stellar model.\nα_fe::Number = 0: [α/Fe] of stellar model.\ncanonical::Bool = true: Whether to use models with convective overshooting (true) or without (false).\nagb::Bool = false: Whether to use models with the synthetic AGB extension (true) or without (false).\nη::Number = 0.4: Reimers mass loss parameter used to calculate the stellar model.\n\njulia> ts = StellarTracks.BaSTIv1.BaSTIv1TrackSet(1e-3, 0.0, true, false, 0.4)\nCanonical BaSTIv1TrackSet without AGB extension, MH=-1.263953315381199, [α/Fe]=0.0, η=0.4, Z=0.001, Y=0.24640000006649643, 1999 EEPs and 40 initial stellar mass points.\n\njulia> ts(1.01) # Interpolate track at new initial mass\nCanonical BaSTIv1Track without AGB extension, M_ini=1.01, MH=-1.263953315381199, [α/Fe]=0.0, η=0.4, Z=0.001, Y=0.24640000006649643, X=0.7525999998860061.\n\njulia> isochrone(ts, 10.0) isa NamedTuple # Interpolate isochrone at `log10(age [yr]) = 10`\ntrue\n\n\n\n\n\n","category":"type"},{"location":"basti_v1/#Individual-Tracks-API","page":"BaSTIv1","title":"Individual Tracks API","text":"","category":"section"},{"location":"basti_v1/#StellarTracks.BaSTIv1.BaSTIv1Track","page":"BaSTIv1","title":"StellarTracks.BaSTIv1.BaSTIv1Track","text":"BaSTIv1Track(zval::Number, mass::Number, α_fe::Number, canonical::Bool, agb::Bool, η::Number)\n\nBaSTIv1Track implements the AbstractTrack interface for the older BaSTI stellar evolution library [13–15].\n\nNote that due to the organization of the BaSTIv1 data files, this method requires constructing a BaSTIv1TrackSet and is therefore not efficient if your aim is to construct multiple tracks with the same properties but different masses. In this case, you should construct a BaSTIv1TrackSet and call it with the masses you want, e.g., ts = BaSTIv1TrackSet(0.0001, 0.0, true, true, 0.4); ts.([0.61, 0.82]).\n\nArguments\n\nzval::Number: Metal mass fraction of stellar model.\nmass::Number: Initial stellar mass of stellar model in solar masses.\nα_fe::Number: [α/Fe] of stellar model.\ncanonical::Bool: Whether to use models with convective overshooting (true) or without (false).\nagb::Bool: Whether to use models with the synthetic AGB extension (true) or without (false).\nη::Number: Reimers mass loss parameter used to calculate the stellar model.\n\njulia> track = StellarTracks.BaSTIv1.BaSTIv1Track(1e-4, 1.2, 0.0, true, true, 0.4)\nCanonical BaSTIv1Track with AGB extension, M_ini=1.2, MH=-2.2651979978981727, [α/Fe]=0.0, η=0.4, Z=0.0001, Y=0.24514, X=0.75476.\njulia> track(9.0) # interpolate track at log10(age [yr]) = 9\n(log_L = 0.7036731727550208, log_Teff = 3.948934612691319, log_g = 4.563808864709117)\n\n\n\n\n\n","category":"type"},{"location":"basti_v1/#BaSTIv1-References","page":"BaSTIv1","title":"BaSTIv1 References","text":"","category":"section"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"This page cites the following references:","category":"page"},{"location":"basti_v1/","page":"BaSTIv1","title":"BaSTIv1","text":"A. Pietrinferni, S. Cassisi, M. Salaris and F. Castelli. A Large Stellar Evolution Database for Population Synthesis Studies. I. Scaled Solar Models and Isochrones. ApJ 612, 168–190 (2004).\n\n\n\nA. Pietrinferni, S. Cassisi, M. Salaris and F. Castelli. A Large Stellar Evolution Database for Population Synthesis Studies. II. Stellar Models and Isochrones for an alpha-enhanced Metal Distribution. ApJ 642, 797–812 (2006).\n\n\n\nA. Pietrinferni, S. Cassisi, M. Salaris and S. Hidalgo. The BaSTI Stellar Evolution Database: models for extremely metal-poor and super-metal-rich stellar populations. A&A 558, A46 (2013).\n\n\n\nS. L. Hidalgo, A. Pietrinferni, S. Cassisi, M. Salaris, A. Mucciarelli, A. Savino, A. Aparicio, V. S. Aguirre and K. Verma. The Updated BaSTI Stellar Evolution Models and Isochrones. I. Solar-scaled Calculations. ApJ 856, 125 (2018).\n\n\n\nA. Vazdekis, P. Coelho, S. Cassisi, E. Ricciardelli, J. Falcón-Barroso, P. Sánchez-Blázquez, F. La Barbera, M. Beasley and A. Pietrinferni. Evolutionary stellar population synthesis with MILES - II. Scaled-solar and α-enhanced models. MNRAS 449, 1177–1214 (2015), arXiv:1504.08032 [astro-ph.GA].\n\n\n\nN. Grevesse and A. Noels. Cosmic abundances of the elements. In: Origin and Evolution of the Elements, edited by N. Prantzos, E. Vangioni-Flam and M. Casse (Jan 1993); pp. 15–25.\n\n\n\nN. Grevesse and A. Sauval. Standard Solar Composition. Space Science Reviews 85, 161–174 (1998).\n\n\n\n","category":"page"},{"location":"doc_index/#index","page":"Index","title":"Index","text":"","category":"section"},{"location":"doc_index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"python/#python","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"","category":"section"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"If you are mainly a Python user and wish to use StellarTracks.jl and/or BolometricCorrections.jl from Python, this guide will describe how to do so. ","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"Julia can be accessed from Python through the juliacall package. You should also install the juliapkg package to manage your Julia dependencies. In most configurations these can be easily installed with pip install juliacall and pip install juliapkg. ","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"info: Info\nThe use of a Python virtual environment is recommended as the total installed data volume (Julia, packages, stellar track and bolometric correction files) may be large, and virtual environments can be removed easily when you are finished with them. We recommend the IPython shell as an extension will be loaded alongside juliacall to better display Julia objects.","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"To install StellarTracks.jl and BolometricCorrections.jl into your juliapkg, environment, execute the following from Python:","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":">>> import juliapkg\n>>> juliapkg.add(\"StellarTracks\")\n>>> juliapkg.add(\"BolometricCorrections\")","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"Now you should be able to load the packages from Python with","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":">>> from juliacall import Main as jl\n>>> jl.seval(\"using StellarTracks, BolometricCorrections\")","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"after which the contents of the package can be accessed as","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":">>> jl.StellarTracks.PARSEC.eep_idxs\nJulia: (PMS_BEG = 1, MS_BEG = 201, MS_TMIN = 401, MS_TO = 601, RG_TIP = 1101, HE_BEG = 1131, END_CHEB = 1631, TPAGB_BEG = 1731)\n>>> jl.StellarTracks.PARSEC.eep_idxs.RG_TIP\n1101\n>>> jl.BolometricCorrections.YBC.ybc_url\n'https://gitlab.com/cycyustc/ybc_tables.git'","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"warning: Multi-Threading\nSome methods in these packages make use of multi-threading in Julia. When executing from juliacall import Main as jl from Python, you may see a warning like this one printed in the console: Julia was started with multiple threads but multithreading support is experimental in JuliaCall. It is recommended to restart Python with the environment variable PYTHON_JULIACALL_HANDLE_SIGNALS=yes set, otherwise you may experience segfaults or other crashes. Note however that this interferes with Python's own signal handling, so for example Ctrl-C will not raise KeyboardInterrupt. See https://juliapy.github.io/PythonCall.jl/stable/faq/#Is-PythonCall/JuliaCall-thread-safe? for further information. You can suppress this warning by setting PYTHON_JULIACALL_HANDLE_SIGNALS=no.In this case, starting Python with the environment variable PYTHON_JULIACALL_HANDLE_SIGNALS=yes is recommended. From a terminal this can be accomplished with PYTHON_JULIACALL_HANDLE_SIGNALS=yes python. Without this setting the multi-threaded functions may cause segmentation faults or other errors.","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"Some self-enclosed examples are given below.","category":"page"},{"location":"python/#Example-Isochrone-Generation","page":"Using StellarTracks.jl from Python","title":"Example Isochrone Generation","text":"","category":"section"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":">>> from juliacall import Main as jl\n>>> import math\n>>> jl.seval(\"using StellarTracks, BolometricCorrections\")\n>>> tracklib = jl.PARSECLibrary()\n# We will choose to use Gaia eDR3 bolometric corrections\n>>> bcg = jl.YBCGrid(\"gaiaEDR3\")\n>>> age = 1e9 # Age [yr], \n>>> MH = -1.7 # [M/H] metallicity\n>>> Av = 0.02 # Reddening (A_v = 0.02 mag)\n>>> iso = jl.isochrone(tracklib, bcg, math.log10(age), MH, Av)\nTable with 9 columns and 1709 rows:\n      eep  m_ini     logTe    Mbol     logg     C_O  G        G_BP     G_RP\n    ┌─────────────────────────────────────────────────────────────────────────\n 1  │ 200  0.10134   3.53186  11.8705  5.35728  0.0  12.5144  13.6954  11.4482\n 2  │ 201  0.106499  3.54134  11.6584  5.33164  0.0  12.2518  13.3588  11.2163\n 3  │ 202  0.107108  3.5424   11.6346  5.32877  0.0  12.2225  13.3218  11.1903\n 4  │ 203  0.107746  3.54349  11.6099  5.3258   0.0  12.1921  13.2836  11.1634\n 5  │ 204  0.108413  3.54461  11.5844  5.32274  0.0  12.1608  13.2444  11.1356\n 6  │ 205  0.10911   3.54575  11.5582  5.31959  0.0  12.1286  13.2041  11.1069\n 7  │ 206  0.109835  3.54693  11.5312  5.31636  0.0  12.0957  13.1631  11.0775\n 8  │ 207  0.11059   3.54812  11.5036  5.31306  0.0  12.062   13.1213  11.0475\n 9  │ 208  0.111373  3.54933  11.4755  5.30968  0.0  12.0276  13.0788  11.0168\n 10 │ 209  0.112186  3.55055  11.4468  5.30625  0.0  11.9927  13.0358  10.9856\n ⋮  │  ⋮      ⋮         ⋮        ⋮        ⋮      ⋮      ⋮        ⋮        ⋮","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"The returned isochrone iso is a Julia TypedTables.Table object. The columns are Julia vectors and can be accessed as iso.eep, for example. The columns can be interpreted as NumPy arrays:","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":">>> import numpy as np\n>>> np.array(iso.m_ini)\narray([0.10133962, 0.10649858, 0.10710792, ..., 1.85926778, 1.85927044,\n       1.8592731 ], shape=(1709,))","category":"page"},{"location":"python/#Example-Track-Generation","page":"Using StellarTracks.jl from Python","title":"Example Track Generation","text":"","category":"section"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"Now we look at interpolating a stellar track at a given initial stellar mass. ","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":">>> from juliacall import Main as jl\n>>> import math\n>>> jl.seval(\"using StellarTracks, BolometricCorrections\")\n>>> tracklib = jl.PARSECLibrary()\n# We will choose to use Gaia eDR3 bolometric corrections\n>>> bcg = jl.YBCGrid(\"gaiaEDR3\")\n>>> age = 1e9 # Age [yr], \n>>> MH = -1.7 # [M/H] metallicity\n>>> Av = 0.02 # Reddening (A_v = 0.02 mag)\n>>> m_ini = 0.81 # Initial stellar mass ([solar masses])\n>>> track = tracklib(MH, m_ini) # Interpolate a stellar track with correct properties\nInterpolatedTrack with M_ini=0.81, MH=-1.6999999999999997, Z=0.0003100162055070581, Y=0.24905182884580257, X=0.7506381549486904.","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"track is now a stellar track that has been interpolated from the initial PARSEC grid to our desired metallicity and initial stellar mass. Calling track(log10(age [yr])) will now return interpolated quantities at our desired age:","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":">>> values = track(math.log10(age)) # Interpolate the track at the desired age\n(logTe = 3.7973512914337046, Mbol = 5.153244139448194, logg = 4.635189907463032, C_O = 0.0)","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"Now, to generate mock photometry in our desired Gaia eDR3 filters, we do","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"# Interpolate the bolometric correction grid to our desired metallicity, reddening\n>>> bcg_interp = bcg(MH, Av)\n>>> phot = bcg_interp(values) # Call bolometric correction grid with track values to get mock photometry\n3-element StaticArraysCore.SVector{3, Float32} with indices SOneTo(3):\n -0.027466586\n -0.27473205\n  0.38811892","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"The Julia SVector type of phot is most akin to a tuple, but can also be converted to a NumPy array","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":">>> tuple(phot)\n(-0.027466585859656334, -0.2747320532798767, 0.3881189227104187)\n>>> np.array(phot)\narray([-0.02746659, -0.27473205,  0.38811892], dtype=float32)","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":"These are now magnitudes corresponding to the filter names contained in bcg_interp:","category":"page"},{"location":"python/","page":"Using StellarTracks.jl from Python","title":"Using StellarTracks.jl from Python","text":">>> [jl.String(s) for s in jl.filternames(bcg_interp)]\n['G', 'G_BP', 'G_RP']","category":"page"},{"location":"basti_v2/#BaSTIv2","page":"BaSTIv2","title":"BaSTIv2","text":"","category":"section"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"Here we describe the interface we provide to the updated BaSTI stellar models presented in [16, 20–22]. BaSTIv2 specific code is housed in the BaSTIv2 submodule, which can be accessed as","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"using StellarTracks.BaSTIv2 # load all exported methods\nusing StellarTracks.BaSTIv2: BaSTIv2Library, X, Y, Z # load specific methods","category":"page"},{"location":"basti_v2/#Data-Acquisition","page":"BaSTIv2","title":"Data Acquisition","text":"","category":"section"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"The tracks will be downloaded automatically using DataDeps.jl the first time you try to access them. The main access point we provide is BaSTIv2Library, which will load and make available a set of stellar models corresponding to a specific chemical mixture and set of input physics. The first time you call this method, you will be prompted to download the required data files. The total data volume is ~110 MB. Information on customizing the install location is available here. The data can be uninstalled by running using DataDeps; rm(datadep\"BaSTIv2\"; recursive=true). With all the tracks available, we are able to perform operations like interpolating isochrones at any age and metallicity within the BaSTIv2 parameter space.","category":"page"},{"location":"basti_v2/#Grid-Properties","page":"BaSTIv2","title":"Grid Properties","text":"","category":"section"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"The BaSTIv2 model grid contains models for the following iron abundances:","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"println(BaSTIv2.feh_grid)","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"This is a superset of all available iron abundances; not all combinations of physics and chemistry will have all these iron abundances available. In particular, the α-enhanced models with [α/Fe]=0.4 presently have a limited number of iron abundances available.","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"The BaSTIv2 grid includes models with scaled-solar abundance patterns, α-enhanced models with an average [α/Fe]=0.4 (presented in Pietrinferni et al. [20]), and α-depleted models with [α/Fe]=-0.2 (presented in Pietrinferni et al. [22]. For these models, the abundances of the α elements O, Ne, Mg, Si, S, Ar, Ca, and Ti have been changed relative to Fe. These α-enhanced models are useful for modeling low-metallicity stars that formed prior to significant iron enrichment from type Ia supernovae. These stars are most common in the Galactic halo and low-mass dwarf galaxies. Note that the conversion between metal mass fraction Z and logarithmic metal abundance [M/H] is the same for the scaled-solar models as for the α-enhanced models, however the iron abundance [Fe/H] is not the same as [M/H] – see Table 1 of Pietrinferni et al. [20] and Pietrinferni et al. [22] for the full elemental abundance tables.","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"For scaled-solar abundance patterns, models are available with different physics models varying convective overshooting during central H-burning and atomic diffusion. So-called \"canonical\" models do not including overshooting, while \"non-canonical\" models do include a convective overshooting treatment (see section 3 of Pietrinferni et al. [13]). Inclusion of convective overshooting during central H-burning mainly changes the main sequence turn-off morphology and generally results in better fits to simple stellar populations like globular clusters. For methods in this module that take a canonical::Bool argument, a value of canonical=true indicates you want to use the \"canonical\" stellar models, while a value of canonical=false means you want to use the \"non-canonical\" models that include convective core overshooting. Similarly, setting an argument diffusion::Bool=true indicates you wish to use the models with atomic diffusion. For scaled-solar abundance patterns, models with different Reimers mass loss parameters η are also available.","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"The α-depleted [22] and α-enhanced [20] models are only available with overshooting and diffusion (canonical=false, diffusion=true, with η=0.3). Additional α-enhanced models with enhanced primordial helium abundances are also available (yp = 0.247 (fiducial), 0.275, 0.3, 0.32).","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"Not all combinations of canonical, diffusion, α-element abundance, primordial helium abundance yp, and Reimers mass loss parameter η are valid. The table below summarizes the available combinations of parameters.","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"[α/Fe] canonical diffusion yp η\n-0.2 false true 0.247 0.3\n0.0 false true 0.247 0.3\n0.0 false false 0.247 0.0\n0.0 false false 0.247 0.3\n0.0 true false 0.247 0.0\n0.4 false true 0.247 0.3\n0.4 false true 0.275 0.3\n0.4 false true 0.300 0.3\n0.4 false true 0.320 0.3","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"As setting up these arguments can be arduous, we have attempted to provide useful error messages when an invalid combination of arguments is requested.","category":"page"},{"location":"basti_v2/#Examples","page":"BaSTIv2","title":"Examples","text":"","category":"section"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"First we load the scaled-solar models ([α/Fe] = 0.0) with convective core overshooting (canonical = false), diffusion (diffusion = true), primordial helium abundance yp = 0.247, and Reimers mass loss parameter η = 0.3. These models will be downloaded via DataDeps.jl if not already available.","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"using StellarTracks.BaSTIv2\np = BaSTIv2Library(0.0, false, true, 0.247, 0.3)","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"Now we use the BaSTIv2Library to interpolate an isochrone at log10(age [yr]) = 10.05 and logarithmic metallicity [M/H] = -1.234. The isochrone is returned as a NamedTuple.","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"iso = isochrone(p, 10.05, -1.234)","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"The NamedTuple returned by isochrone can be converted to table types, like TypedTables.Table to simplify further use.","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"using TypedTables: Table\nTable(iso)","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"The theoretical isochrone is plotted below.","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"plot_hr(iso) # hide","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"We can load a grid of bolometric corrections from BolometricCorrections.jl to add observational magnitudes to the theoretical isochrone. In this example, we use the MIST bolometric correction grid, which offers bolometric corrections for varying metallicities ([M/H]) and reddening values (A_V).","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"Because the solar metallicity calibrations of BaSTIv2 and MIST are not exactly the same, the protostellar metal mass fraction Z that corresponds to a given [M/H] is not the same between the two libraries. The isochrone interface will convert the given [M/H], which is assumed to be the desired metallicity in the stellar track library, to its corresponding metal mass fraction, and then convert from the metal mass fraction to the correct [M/H] for the assumed chemical model of the bolometric correction grid. For non-solar-scaled BaSTIv2 models, we will try to use the same α-abundance for the bolometric corrections if they are available. If BCs with the correct α-abundance are not available in the bolometric correction grid you supply, we will instead match the metal mass fractions Z between the stellar tracks and the bolometric corrections, following the canonical wisdom that stellar tracks and isochrones with altered α abundances can be well approximated by scaled-solar models with the same total metallicity (see, e.g., section 3.2 of [20]). ","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"This method returns a TypedTables.Table that contains the information from both sources. Here we evaluate an isochrone with log10(age [yr]) = 10.05, [M/H] = -1.234, and A_v = 002 mag. ","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"using BolometricCorrections.MIST: MISTBCGrid\nm = MISTBCGrid(\"JWST\")\niso = isochrone(p, m, 10.05, -1.234, 0.02)","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"All available columns in the isochrone can be obtained with TypedTables.columnnames.","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"using TypedTables: columnnames\ncolumnnames(iso)","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"A color-magnitude diagram constructed from the isochrone is plotted below.","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"plot_cmd(iso) # hide","category":"page"},{"location":"basti_v2/#Chemistry-API","page":"BaSTIv2","title":"Chemistry API","text":"","category":"section"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"We provide the StellarTracks.BaSTIv2.BaSTIv2Chemistry type that follows the chemistry API defined in BolometricCorrections.jl to access information on the chemical mixture assumed for the BaSTIv2 models.","category":"page"},{"location":"basti_v2/#StellarTracks.BaSTIv2.BaSTIv2Chemistry","page":"BaSTIv2","title":"StellarTracks.BaSTIv2.BaSTIv2Chemistry","text":"BaSTIv2Chemistry(α_fe::Number, yp::Number)\n\nReturns a struct representing the BaSTIv2 chemical mixture model with [α/Fe] = α_fe and primordial helium abundance yp.  These BaSTI models, presented in Hidalgo et al. [16], Pietrinferni et al. [20], Salaris et al. [21] and Pietrinferni et al. [22], include solar-scaled chemical compositions, α-enhanced compositions with [α/Fe] ≈ 0.4, and α-depleted compositions with [α/Fe] ≈ -0.2.\n\nThe solar protostellar chemical mixture for these models was calibrated to reproduce solar photospheric observations via a forward modeling approach (see section 3 of Hidalgo et al. [16]). Most solar photospheric abundances are taken from Caffau et al. [23].\n\nAs the BaSTIv2 grid was run with uniform [Fe/H] values but differing [α/Fe], the metal mass fraction Z and the logarithmic metal abundance [M/H] are not uniform for every [α/Fe] in the grid. We therefore need to know [α/Fe] so that we can convert the [Fe/H] values to [M/H] and Z. The α-enhanced library also includes models with enhanced primordial helium abundance (yp here), so we require that information as well.\n\nFor the [α/Fe] = 0.4 models presented in [Pietrinferni2021(@citet) and the [α/Fe] = -0.2 models presented in Pietrinferni et al. [22], the α elements O, Ne, Mg, Si, S, Ca, and Ti have all been uniformly modified with respect to the Fe abundance relative to the Caffau et al. [23] heavy element distribution. As C and N are not changed, [M/H] = [Fe/H] + 0.75 * [α/Fe]; see, e.g., Equation 4 of Vazdekis et al. [17].\n\njulia> using StellarTracks.BaSTIv2: BaSTIv2Chemistry, X, Y, Z, X_phot, Y_phot, Z_phot, MH;\n\njulia> chem = BaSTIv2Chemistry(0.0, 0.247);\n\njulia> X(chem) + Y(chem) + Z(chem) ≈ 1 # solar protostellar values\ntrue\n\njulia> X_phot(chem) + Y_phot(chem) + Z_phot(chem) ≈ 1 # solar photospheric values\ntrue\n\njulia> isapprox(MH(chem, Z_phot(chem) * 0.1), -1; atol=0.01)\ntrue\n\njulia> isapprox(Z(chem, -1), Z_phot(chem) * 0.1; rtol=0.02)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"Note that in our conversions between Z and [M/H], remembering that MH = log10(Z/X) - log10(Z⊙/X⊙), we use the photospheric solar values for Z⊙ and X⊙ (these are defined in section 3 of Hidalgo et al. [16]). This reproduces the relation between Z and [M/H] defined in Table 2 of Hidalgo et al. [16].","category":"page"},{"location":"basti_v2/#Library-API","page":"BaSTIv2","title":"Library API","text":"","category":"section"},{"location":"basti_v2/#StellarTracks.BaSTIv2.BaSTIv2Library","page":"BaSTIv2","title":"StellarTracks.BaSTIv2.BaSTIv2Library","text":"BaSTIv2Library(α_fe::Number=0, canonical::Bool=false, diffusion::Bool=true,\n               yp::Number=0.247, η::Number=0.3)\n\nBaSTIv2Library implements the AbstractTrackLibrary interface for the updated BaSTI stellar evolution models presented in [16, 20–22].\n\nOptional Arguments\n\nα_fe::Number = 0: [α/Fe] of stellar model.\ncanonical::Bool = false: Whether to use models with convective overshooting (true) or without (false).\ndiffusion::Bool = true: Whether to use models with atomic diffusion (true) or without (false).\nyp::Number = 0.247: Primordial helium abundance assumed for stellar model.\nη::Number = 0.3: Reimers mass loss parameter used to calculate the stellar model.\n\nIf you construct an instance as p = BaSTIv2Library(0.0, false), it is callable as p(mh::Number, M::Number) which returns an InterpolatedTrack that interpolates between tracks to a specific metallicity ([M/H]) and initial stellar mass (M).\n\nThis type also supports isochrone construction (see isochrone).\n\njulia> p = BaSTIv2Library(0.0, false, true, 0.247, 0.3)\nStructure of interpolants for the updated BaSTI library of non-canonical stellar tracks with diffusion, [α/Fe]=0.0, Y_p=0.247, η=0.3. Valid range of metallicities is [Fe/H] = (-3.2f0, 0.3f0), [M/H] = (-3.2f0, 0.3f0).\n\njulia> isochrone(p, 10.05, -2.01) isa NamedTuple\ntrue\n\njulia> p(-2.05, 1.05)\nInterpolatedTrack with M_ini=1.05, MH=-2.05, Z=0.00013941349859095735, Y=0.2471826256034804, X=0.7526779608979287.\n\n\n\n\n\n","category":"type"},{"location":"basti_v2/#StellarTracks.isochrone-Tuple{BaSTIv2Library, Number, Number}","page":"BaSTIv2","title":"StellarTracks.isochrone","text":"isochrone(p::BaSTIv2Library, logAge::Number, mh::Number)\n\nInterpolates properties of the stellar tracks in the library at the requested logarithmic age (logAge = log10(age [yr])) and logarithmic metallicity [M/H] = mh. Returns a NamedTuple containing the properties listed below:\n\neep: Equivalent evolutionary points.\nm_ini: Initial stellar masses, in units of solar masses.\nlogTe: Base-10 logarithm of the effective temperature [K] of the stellar model.\nMbol: Bolometric luminosity of the stellar model.\nlogg: Surface gravity of the stellar model.\n\n\n\n\n\n","category":"method"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"The full library is principally a set of BaSTIv2TrackSets, with one track set per unique chemical composition. We do not presently offer interpolation as a function of [α/Fe] or between the canonical and non-canonical models, or between the models with and without diffusion, so the individual track sets in the library vary only in total metallicity (i.e., Z).","category":"page"},{"location":"basti_v2/#Track-Set-API","page":"BaSTIv2","title":"Track Set API","text":"","category":"section"},{"location":"basti_v2/#StellarTracks.BaSTIv2.BaSTIv2TrackSet","page":"BaSTIv2","title":"StellarTracks.BaSTIv2.BaSTIv2TrackSet","text":"BaSTIv2TrackSet(feh::Number, α_fe::Number=0, canonical::Bool=false,\n                diffusion::Bool=true, yp::Number=0.247, η::Number=0.3)\n\nBaSTIv2TrackSet implements the AbstractTrackSet interface for the updated BaSTI stellar evolution library [16, 20–22].\n\nArguments\n\nfeh::Number: [Fe/H] of stellar model\n\nOptional Arguments\n\nα_fe::Number = 0: [α/Fe] of stellar model.\ncanonical::Bool = false: Whether to use models with convective overshooting (true) or without (false).\ndiffusion::Bool = true: Whether to use models with atomic diffusion (true) or without (false).\nyp::Number = 0.247: Primordial helium abundance assumed for stellar model.\nη::Number = 0.3: Reimers mass loss parameter used to calculate the stellar model.\n\njulia> ts = StellarTracks.BaSTIv2.BaSTIv2TrackSet(-2.2, 0.0, false, true, 0.247, 0.3)\nNon-canonical BaSTIv2TrackSet with diffusion, [M/H]=-2.2, [Fe/H]=-2.2, [α/Fe]=0.0, Z=9.870951724808943e-5, Y=0.24712930338792122, Y_p=0.247, η=0.3, 2099 EEPs and 56 initial stellar mass points.\n\njulia> ts(1.01) # Interpolate track at new initial mass\nNon-canonical BaSTIv2Track with diffusion, M_ini=1.01, [M/H]=-2.2, [Fe/H]=-2.2, [α/Fe]=0.0, Z=9.870951724808943e-5, Y=0.24712930338792122, X=0.7527719870948307, Y_p=0.247, η=0.3.\n\njulia> isochrone(ts, 10.0) isa NamedTuple # Interpolate isochrone at `log10(age [yr]) = 10`\ntrue\n\n\n\n\n\n","category":"type"},{"location":"basti_v2/#Individual-Tracks-API","page":"BaSTIv2","title":"Individual Tracks API","text":"","category":"section"},{"location":"basti_v2/#StellarTracks.BaSTIv2.BaSTIv2Track","page":"BaSTIv2","title":"StellarTracks.BaSTIv2.BaSTIv2Track","text":"BaSTIv2Track(feh::Number, mass::Number, α_fe::Number, canonical::Bool, diffusion::Bool, yp::Number, η::Number)\n\nBaSTIv2Track implements the AbstractTrack interface for the updated BaSTI stellar evolution library [16, 20–22].\n\nNote that due to the organization of the BaSTIv2 data files, this method requires constructing a BaSTIv2TrackSet and is therefore not efficient if your aim is to construct multiple tracks with the same properties but different masses. In this case, you should construct a BaSTIv2TrackSet and call it with the masses you want, e.g., ts = BaSTIv2TrackSet(-2.2, 0.0, true, true, 0.247, 0.3); ts.([0.61, 0.82]).\n\nArguments\n\nfeh::Number: [Fe/H] of stellar model.\nmass::Number: Initial stellar mass of stellar model in solar masses.\nα_fe::Number: [α/Fe] of stellar model.\ncanonical::Bool: Whether to use models with convective overshooting (true) or without (false).\ndiffusion::Bool: Whether to use models with atomic diffusion (true) or without (false).\nyp::Number: Primordial helium abundance assumed for stellar model.\nη::Number: Reimers mass loss parameter used to calculate the stellar model.\n\nNote that this function takes the input metallicity as [Fe/H], which is not equal to [M/H] when considering models with [α/Fe] != 0 α_fe != 0.\n\njulia> track = StellarTracks.BaSTIv2.BaSTIv2Track(-2.2, 0.81, 0.0, false, true, 0.247, 0.3)\nNon-canonical BaSTIv2Track with diffusion, M_ini=0.81, [M/H]=-2.2, [Fe/H]=-2.2, [α/Fe]=0.0, Z=9.870952533235687e-5, Y=0.24712930947818537, X=0.7527719809964823, Y_p=0.247, η=0.3.\n\njulia> track(9.0) # interpolate track at log10(age [yr]) = 9\n(log_L = -0.1362482951194913, log_Teff = 3.8011768472932603, log_g = 4.642115349406555)\n\n\n\n\n\n","category":"type"},{"location":"basti_v2/#Acknowledgements","page":"BaSTIv2","title":"Acknowledgements","text":"","category":"section"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"We would like to thank Alessandro Savino for his assistance acquiring and working with the updated BaSTI tracks.","category":"page"},{"location":"basti_v2/#BaSTIv2-References","page":"BaSTIv2","title":"BaSTIv2 References","text":"","category":"section"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"This page cites the following references:","category":"page"},{"location":"basti_v2/","page":"BaSTIv2","title":"BaSTIv2","text":"A. Pietrinferni, S. Cassisi, M. Salaris and F. Castelli. A Large Stellar Evolution Database for Population Synthesis Studies. I. Scaled Solar Models and Isochrones. ApJ 612, 168–190 (2004).\n\n\n\nS. L. Hidalgo, A. Pietrinferni, S. Cassisi, M. Salaris, A. Mucciarelli, A. Savino, A. Aparicio, V. S. Aguirre and K. Verma. The Updated BaSTI Stellar Evolution Models and Isochrones. I. Solar-scaled Calculations. ApJ 856, 125 (2018).\n\n\n\nA. Vazdekis, P. Coelho, S. Cassisi, E. Ricciardelli, J. Falcón-Barroso, P. Sánchez-Blázquez, F. La Barbera, M. Beasley and A. Pietrinferni. Evolutionary stellar population synthesis with MILES - II. Scaled-solar and α-enhanced models. MNRAS 449, 1177–1214 (2015), arXiv:1504.08032 [astro-ph.GA].\n\n\n\nA. Pietrinferni, S. Hidalgo, S. Cassisi, M. Salaris, A. Savino, A. Mucciarelli, K. Verma, V. Silva Aguirre, A. Aparicio and J. W. Ferguson. Updated BaSTI Stellar Evolution Models and Isochrones. II. α-enhanced Calculations. ApJ 908, 102 (2021). Accessed on Apr 28, 2024. ADS Bibcode: 2021ApJ...908..102P.\n\n\n\nM. Salaris, S. Cassisi, A. Pietrinferni and S. Hidalgo. The updated BASTI stellar evolution models and isochrones - III. White dwarfs. MNRAS 509, 5197–5208 (2022). Accessed on Apr 28, 2024. ADS Bibcode: 2022MNRAS.509.5197S.\n\n\n\nA. Pietrinferni, M. Salaris, S. Cassisi, A. Savino, A. Mucciarelli, D. Hyder and S. Hidalgo. The updated BaSTI stellar evolution models and isochrones - IV. α-Depleted calculations. MNRAS 527, 2065–2070 (2024). Accessed on Apr 28, 2024. ADS Bibcode: 2024MNRAS.527.2065P.\n\n\n\nE. Caffau, H.-G. Ludwig, M. Steffen, B. Freytag and P. Bonifacio. Solar Chemical Abundances Determined with a CO5BOLD 3D Model Atmosphere. Solar Physics 268, 255–269 (2011).\n\n\n\n","category":"page"},{"location":"#overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The purpose of this package is to provide access to pre-computed libraries of stellar evolutionary tracks. These libraries provide predictions for stellar interior and photosphere properties for stars of different initial masses and chemical compositions. In their standard form, each track describes the evolution of a single model star as it evolves through time. Tracks are identified uniquely by their initial stellar masses (M_textini) and chemical compositions. Most libraries will provide, at minimum, a set of stellar models with different total metallicity (typically quantified by the metal mass fraction Z). Some libraries will also vary other parameters like α-element abundance.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Isochrones representing stellar populations of uniform age and chemical composition but varying initial stellar masses can be formed by interpolating the tracks with the correct chemical compositions to the requested age. This form of isochrone creation can struggle when the spacing in initial mass between the tracks in a set is poor and generally does a poor job of capturing isochrone features that only manifest over a small range of initial stellar masses for a given age. Isochrone creation can be improved by identifying equivalent evolutionary points (EEPs) in these tracks [1]; example EEPs are the main sequence turn-off and the tip of the red giant branch. For each EEP, a relation between the stellar initial mass and the age of the star at the EEP can be constructed so that the initial mass of the star as a function of age can be inferred for each EEP. Properties like bolometric luminosity can then be interpolated and evaluated as a function of initial mass for this EEP. When there are many well-spaced EEPs, this method of isochrone creation outperforms the easier approach. We focus on tracks with EEPs to support this use case, as isochrone generation is one of the primary features of this package.","category":"page"},{"location":"#Supported-Libraries","page":"Overview","title":"Supported Libraries","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"We currently support the following stellar track libraries:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"PARSECv1.2S\nMIST\nBaSTIv1 (older BaSTI models, circa 2013)\nBaSTIv2 (updated BaSTI tracks)","category":"page"},{"location":"#Chemistry","page":"Overview","title":"Chemistry","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"We include information on the chemical mixtures assumed in each supported library above. We use the interface defined in BolometricCorrections.jl to provide this information.","category":"page"},{"location":"#Bolometric-Corrections","page":"Overview","title":"Bolometric Corrections","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The core function of this package is to provide an interface to libraries of stellar evolutionary tracks. One of the most common uses of these tracks is to make predictions for stellar observations, which requires placing the theoretical tracks (which model only stellar interior evolution) into the observed space by applying model stellar atmospheres.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"For integrated stellar photometry, this is typically done by applying bolometric corrections that integrate a stellar atmosphere over an observational bandpass to predict the stellar model's magnitude in that bandpass. An interface to these bolometric correction grids is provided by BolometricCorrections.jl. We take advantage of this interface to support the generation of isochrones in observational bandpasses.","category":"page"},{"location":"#Installation","page":"Overview","title":"Installation","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"This package is registered to Julia's General registry and can be installed via Pkg from the Julia REPL by executing","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"import Pkg;\nPkg.add(\"StellarTracks\");","category":"page"},{"location":"#API","page":"Overview","title":"API","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Documentation for our generic API is available here.","category":"page"},{"location":"#References","page":"Overview","title":"References","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"This page cites the following references:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"A. Dotter. MESA ISOCHRONES AND STELLAR TRACKS (MIST) 0: METHODS FOR THE CONSTRUCTION OF STELLAR ISOCHRONES. ApJS 222, 8 (2016).\n\n\n\n","category":"page"},{"location":"refs/#bibliography","page":"Bibliography","title":"Bibliography","text":"","category":"section"},{"location":"refs/","page":"Bibliography","title":"Bibliography","text":"A. Dotter. MESA ISOCHRONES AND STELLAR TRACKS (MIST) 0: METHODS FOR THE CONSTRUCTION OF STELLAR ISOCHRONES. ApJS 222, 8 (2016).\n\n\n\nA. Bressan, P. Marigo, L. Girardi, B. Salasnich, C. Dal Cero, S. Rubele and A. Nanni. PARSEC : stellar tracks and isochrones with the PAdova and TRieste Stellar Evolution Code. MNRAS 427, 127–145 (2012).\n\n\n\nY. Chen, L. Girardi, a. Bressan, P. Marigo, M. Barbieri and X. Kong. Improving PARSEC models for very low mass stars. MNRAS 444, 2525–2543 (2014).\n\n\n\nJ. Tang, A. Bressan, P. Rosenfield, A. Slemer, P. Marigo, L. Girardi and L. Bianchi. New PARSEC evolutionary tracks of massive stars at low metallicity: testing canonical stellar evolution in nearby star-forming dwarf galaxies. MNRAS 445, 4287–4305 (2014). Accessed on Mar 24, 2024. ADS Bibcode: 2014MNRAS.445.4287T.\n\n\n\nY. Chen, A. Bressan, L. Girardi, P. Marigo, X. Kong and A. Lanza. PARSEC evolutionary tracks of massive stars up to 350 M⊙ at metallicities 0.0001 ≤ Z ≤ 0.04. MNRAS 452, 1068–1080 (2015). Accessed on Mar 24, 2024. ADS Bibcode: 2015MNRAS.452.1068C.\n\n\n\nP. Rosenfield, P. Marigo, L. Girardi, J. J. Dalcanton, A. Bressan, B. F. Williams and A. Dolphin. Evolution of Thermally Pulsing Asymptotic Giant Branch Stars. V. Constraining the Mass Loss and Lifetimes of Intermediate-mass, Low-metallicity AGB Stars. ApJ 822, 73 (2016). Accessed on Aug 24, 2024. ADS Bibcode: 2016ApJ...822...73R.\n\n\n\nP. Marigo, L. Girardi, A. Bressan, P. Rosenfield, B. Aringer, Y. Chen, M. Dussin, A. Nanni, G. Pastorelli, T. S. Rodrigues, M. Trabucchi, S. Bladh, J. Dalcanton, M. A. Groenewegen, J. Montalbán and P. R. Wood. A New Generation of PARSEC-COLIBRI Stellar Isochrones Including the TP-AGB Phase. ApJ 835, 77 (2017). Accessed on Aug 21, 2024. ADS Bibcode: 2017ApJ...835...77M.\n\n\n\nG. Pastorelli, P. Marigo, L. Girardi, Y. Chen, S. Rubele, M. Trabucchi, B. Aringer, S. Bladh, A. Bressan, J. Montalbán, M. L. Boyer, J. J. Dalcanton, K. Eriksson, M. A. Groenewegen, S. Höfner, T. Lebzelter, A. Nanni, P. Rosenfield, P. R. Wood and M.-R. L. Cioni. Constraining the thermally pulsing asymptotic giant branch phase with resolved stellar populations in the Small Magellanic Cloud. MNRAS 485, 5666–5692 (2019). Accessed on Mar 24, 2024. ADS Bibcode: 2019MNRAS.485.5666P.\n\n\n\nG. Pastorelli, P. Marigo, L. Girardi, B. Aringer, Y. Chen, S. Rubele, M. Trabucchi, S. Bladh, M. L. Boyer, A. Bressan, J. J. Dalcanton, M. A. Groenewegen, T. Lebzelter, N. Mowlavi, K. L. Chubb, M.-R. L. Cioni, R. de Grijs, V. D. Ivanov, A. Nanni, J. T. van Loon and S. Zaggia. Constraining the thermally pulsing asymptotic giant branch phase with resolved stellar populations in the Large Magellanic Cloud. MNRAS 498, 3283–3301 (2020). Accessed on Mar 24, 2024. ADS Bibcode: 2020MNRAS.498.3283P.\n\n\n\nC. Nguyen, G. Costa, L. Girardi, G. Volpato, A. Bressan, Y. Chen, P. Marigo, X. Fu and P. Goudfrooij. PARSEC V2.0: Stellar tracks and isochrones of low- and intermediate-mass stars with rotation. Astronomy & Astrophysics 665, A126 (2022), arXiv:2207.08642 [astro-ph.SR].\n\n\n\nG. Costa, K. Shepherd, A. Bressan, F. Addari, Y. Chen, X. Fu, G. Volpato, C. Nguyen, L. Girardi, P. Marigo, A. Mazzi, G. Pastorelli, M. Trabucchi, D. Bossini and S. Zaggia. Evolutionary tracks, ejecta, and ionizing photons from intermediate-mass to very massive stars with PARSEC. Astronomy & Astrophysics 694, A193 (2025), arXiv:2501.12917 [astro-ph.SR].\n\n\n\nJ. Choi, A. Dotter, C. Conroy, M. Cantiello, B. Paxton and B. D. Johnson. MESA ISOCHRONES AND STELLAR TRACKS (MIST). I. SOLAR-SCALED MODELS. ApJ 823, 102 (2016).\n\n\n\nA. Pietrinferni, S. Cassisi, M. Salaris and F. Castelli. A Large Stellar Evolution Database for Population Synthesis Studies. I. Scaled Solar Models and Isochrones. ApJ 612, 168–190 (2004).\n\n\n\nA. Pietrinferni, S. Cassisi, M. Salaris and F. Castelli. A Large Stellar Evolution Database for Population Synthesis Studies. II. Stellar Models and Isochrones for an alpha-enhanced Metal Distribution. ApJ 642, 797–812 (2006).\n\n\n\nA. Pietrinferni, S. Cassisi, M. Salaris and S. Hidalgo. The BaSTI Stellar Evolution Database: models for extremely metal-poor and super-metal-rich stellar populations. A&A 558, A46 (2013).\n\n\n\nS. L. Hidalgo, A. Pietrinferni, S. Cassisi, M. Salaris, A. Mucciarelli, A. Savino, A. Aparicio, V. S. Aguirre and K. Verma. The Updated BaSTI Stellar Evolution Models and Isochrones. I. Solar-scaled Calculations. ApJ 856, 125 (2018).\n\n\n\nA. Vazdekis, P. Coelho, S. Cassisi, E. Ricciardelli, J. Falcón-Barroso, P. Sánchez-Blázquez, F. La Barbera, M. Beasley and A. Pietrinferni. Evolutionary stellar population synthesis with MILES - II. Scaled-solar and α-enhanced models. MNRAS 449, 1177–1214 (2015), arXiv:1504.08032 [astro-ph.GA].\n\n\n\nN. Grevesse and A. Noels. Cosmic abundances of the elements. In: Origin and Evolution of the Elements, edited by N. Prantzos, E. Vangioni-Flam and M. Casse (Jan 1993); pp. 15–25.\n\n\n\nN. Grevesse and A. Sauval. Standard Solar Composition. Space Science Reviews 85, 161–174 (1998).\n\n\n\nA. Pietrinferni, S. Hidalgo, S. Cassisi, M. Salaris, A. Savino, A. Mucciarelli, K. Verma, V. Silva Aguirre, A. Aparicio and J. W. Ferguson. Updated BaSTI Stellar Evolution Models and Isochrones. II. α-enhanced Calculations. ApJ 908, 102 (2021). Accessed on Apr 28, 2024. ADS Bibcode: 2021ApJ...908..102P.\n\n\n\nM. Salaris, S. Cassisi, A. Pietrinferni and S. Hidalgo. The updated BASTI stellar evolution models and isochrones - III. White dwarfs. MNRAS 509, 5197–5208 (2022). Accessed on Apr 28, 2024. ADS Bibcode: 2022MNRAS.509.5197S.\n\n\n\nA. Pietrinferni, M. Salaris, S. Cassisi, A. Savino, A. Mucciarelli, D. Hyder and S. Hidalgo. The updated BaSTI stellar evolution models and isochrones - IV. α-Depleted calculations. MNRAS 527, 2065–2070 (2024). Accessed on Apr 28, 2024. ADS Bibcode: 2024MNRAS.527.2065P.\n\n\n\nE. Caffau, H.-G. Ludwig, M. Steffen, B. Freytag and P. Bonifacio. Solar Chemical Abundances Determined with a CO5BOLD 3D Model Atmosphere. Solar Physics 268, 255–269 (2011).\n\n\n\n","category":"page"}]
}
